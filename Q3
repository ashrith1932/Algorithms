#include <stdio.h>
#include <stdlib.h>

struct Ad {
    int time;
    int profit;
};

float profitPerUnit(struct Ad x) {
    return (float)x.profit / (float)x.time;
}

int compare(const void *a, const void *b) {
    struct Ad *ad1 = (struct Ad *)a;
    struct Ad *ad2 = (struct Ad *)b;
    float r1 = (float)ad1->profit / ad1->time;
    float r2 = (float)ad2->profit / ad2->time;
    if (r1 < r2) return 1;  // descending order
    else if (r1 > r2) return -1;
    else return 0;
}

float fractional_knapsack(struct Ad arr[], int n, int time) {
    qsort(arr, n, sizeof(struct Ad), compare);
    float profit = 0;
    for (int i = 0; i < n; i++) {
        if (arr[i].time <= time) {
            profit += arr[i].profit;
            time -= arr[i].time;
        } else {
            profit += profitPerUnit(arr[i]) * time;
            break;
        }
    }
    return profit;
}

int main() {
    struct Ad arr[] = { {10,100}, {20,50}, {30,100}, {5,25} };
    int n = sizeof(arr) / sizeof(arr[0]);
    int time = 180;
    float total = fractional_knapsack(arr, n, time);
    printf("Maximum profit: %f\n", total);
    return 0;
}


#include <stdio.h>

void swap(int *a, int *b) { int t = *a; *a = *b; *b = t; }

int main() {
    int n;
    printf("Enter number of meetings: ");
    scanf("%d", &n);

    int start[n], end[n];
    for (int i = 0; i < n; i++) {
        printf("Enter start and end time of meeting %d: ", i+1);
        scanf("%d %d", &start[i], &end[i]);
    }

    for (int i = 0; i < n-1; i++)
        for (int j = 0; j < n-i-1; j++)
            if (end[j] > end[j+1]) {
                swap(&end[j], &end[j+1]);
                swap(&start[j], &start[j+1]);
            }

    printf("\nSelected meetings:\n");
    int lastEnd = 0;
    for (int i = 0; i < n; i++) {
        if (start[i] >= lastEnd) {
            printf("Meeting %d: (%d, %d)\n", i+1, start[i], end[i]);
            lastEnd = end[i];
        }
    }
    return 0;
}

import java.io.*;
import java.util.*;

public class DecimalToBinaryFile {
    public static void main(String[] args) {
        String inputFile = "input.txt";
        String outputFile = "output.txt";

        try (
            Scanner sc = new Scanner(new File(inputFile));
            BufferedWriter writer = new BufferedWriter(new FileWriter(outputFile));
        ) {
            while (sc.hasNextLine()) {
                String line = sc.nextLine().trim();

                try {
                    int decimal = Integer.parseInt(line);
                    String binary = Integer.toBinaryString(decimal);
                    writer.write(binary);
                    writer.newLine();
                } catch (NumberFormatException e) {
                    writer.write("Invalid input: " + line);
                    writer.newLine();
                }
            }
            System.out.println("Conversion completed! Check " + outputFile);
        } catch (IOException e) {
            System.out.println("File error: " + e.getMessage());
        }
    }
}
